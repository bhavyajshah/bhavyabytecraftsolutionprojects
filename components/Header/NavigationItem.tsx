/**
 * This code was generated by Builder.io.
 */
import React, { useState, useRef, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  FaMobileAlt,
  FaDesktop,
  FaCloud,
  FaDatabase,
  FaRobot,
  FaLock,
  FaChartBar,
  FaCog,
} from "react-icons/fa";

interface NavigationItemProps {
  label: string;
  href: string;
  hasDropdown?: boolean;
  isDarkMode: boolean;
}

const services = [
  { name: "Mobile App Development", icon: FaMobileAlt },
  { name: "Web Development", icon: FaDesktop },
  { name: "Cloud Services", icon: FaCloud },
  { name: "Database Management", icon: FaDatabase },
  { name: "AI & Machine Learning", icon: FaRobot },
  { name: "Cybersecurity", icon: FaLock },
  { name: "Data Analytics", icon: FaChartBar },
  { name: "DevOps", icon: FaCog },
];

const NavigationItem: React.FC<NavigationItemProps> = ({
  label,
  href,
  hasDropdown,
  isDarkMode,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<any>(null);

  const toggleDropdown = () => {
    if (hasDropdown) {
      setIsOpen(!isOpen);
    }
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setIsOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  return (
    <li
      className="flex items-start self-stretch my-auto relative"
      ref={dropdownRef}
    >
      <div
        className={`flex gap-1.5 items-center cursor-pointer ${
          isDarkMode
            ? "text-gray-300 hover:text-white"
            : "text-indigo-950 hover:text-indigo-700"
        } transition-colors duration-300`}
        onClick={toggleDropdown}
        onKeyDown={(e) => e.key === "Enter" && toggleDropdown()}
        role="button"
        tabIndex={0}
      >
        <a href={href} className="self-stretch">
          {label}
        </a>
        {hasDropdown && (
          <svg
            className={`w-4 h-4 transition-transform duration-300 ${
              isOpen ? "transform rotate-180" : ""
            }`}
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M19 9l-7 7-7-7"
            />
          </svg>
        )}
      </div>
      {hasDropdown && (
        <AnimatePresence>
          {isOpen && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className={`absolute left-0 mt-10 ${
                isDarkMode ? "bg-gray-800" : "bg-white"
              } shadow-lg rounded-md p-2 z-10 w-64`}
            >
              <ul className="grid grid-cols-2 gap-2">
                {services.map((service, index) => (
                  <motion.li
                    key={index}
                    initial={{ opacity: 0, x: -10 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.05 }}
                  >
                    <a
                      href="#"
                      className={`flex items-center px-4 py-2 text-sm ${
                        isDarkMode
                          ? "text-gray-300 hover:bg-gray-700 hover:text-white"
                          : "text-gray-700 hover:bg-gray-100"
                      } rounded transition-colors duration-300`}
                    >
                      <service.icon className="mr-2" />
                      <span>{service.name}</span>
                    </a>
                  </motion.li>
                ))}
              </ul>
            </motion.div>
          )}
        </AnimatePresence>
      )}
    </li>
  );
};

export default NavigationItem;
